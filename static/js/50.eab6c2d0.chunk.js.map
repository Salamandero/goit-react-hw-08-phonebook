{"version":3,"file":"static/js/50.eab6c2d0.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.js","components/ContactEditor/ContactEditor.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { Button, List, ListItem } from '@mui/material';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { theme } from 'theme';\nimport { selectAllContacts } from '../../redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n  const visibleContacts = getVisibleContacts();\n  return (\n    <>\n      {contacts.length > 0 && (\n        <List>\n          {visibleContacts.map(contact => (\n            <ListItem sx={{ fontSize: '18px' }} key={contact.id}>\n              <p>{contact.name}:</p>\n              <p>{contact.number}</p>\n              <Button\n                sx={{\n                  width: '100px',\n                  ml: 'auto',\n\n                  [`&:hover`]: {\n                    backgroundColor: theme.palette.secondary.main,\n                    color: 'yellow',\n                  },\n                }}\n                // color=\"inherit\"\n                variant=\"outlined\"\n                type=\"button\"\n                onClick={() => onDeleteContact(contact.id)}\n              >\n                Delete\n              </Button>\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n","import toast from 'react-hot-toast';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { Box, Button, TextField, Typography } from '@mui/material';\n\nexport const ContactEditor = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return toast.error(`Type field ${name} don't read `);\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  const handleClick = e => {\n    e.preventDefault();\n    if (!name.trim()) {\n      return toast.error('The field Name is empty, write Name');\n    }\n    if (!phone.trim()) {\n      return toast.error('The field Phone is empty, write Phone');\n    }\n    if (phone.length < 3 || phone.length > 24) {\n      return toast.error(\n        `You wrote ${phone.length} symbols, but need from 3 to 24   `\n      );\n    }\n    const newName = name.trim();\n    const proofName = Object.values(contacts).map(contact => contact.name);\n    if (proofName.includes(newName)) {\n      reset();\n      return toast.error(`${newName} is already in contacts.`);\n    }\n\n    dispatch(addContact({ name: name, number: phone }));\n\n    reset();\n  };\n\n  return (\n    <>\n      <Box component=\"form\" sx={{ display: 'grid', gap: '24px' }}>\n        <Typography variant=\"h5\" sx={{ textAlign: 'center' }}>\n          Write new contact\n        </Typography>\n\n        <TextField\n          id=\"outlined-textarea\"\n          label=\"Name\"\n          placeholder=\"Name\"\n          multiline\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <TextField\n          id=\"outlined-textarea\"\n          label=\"Phone\"\n          placeholder=\"Phone\"\n          multiline\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <Button\n          sx={{ width: '50%', m: '0 auto' }}\n          // color=\"inherit\"\n          variant=\"contained\"\n          type=\"submit\"\n          onClick={handleClick}\n        >\n          Add contact\n        </Button>\n      </Box>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <TextField\n        id=\"outlined-multiline-flexible\"\n        label=\"Find contact by name:\"\n        multiline\n        maxRows={4}\n        type=\"text\"\n        onChange={onChange}\n        sx={{ mt: 6, width: '100%' }}\n      />\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { Box, Container } from '@mui/material';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Container sx={{ mt: 4 }} maxWidth=\"md\">\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n\n        <ContactEditor />\n\n        <Filter />\n        {isLoading ? (\n          <Box sx={{ fontWeight: 700, textAlign: 'center', mt: 4 }}>\n            Request in progress...\n          </Box>\n        ) : (\n          <ContactList />\n        )}\n      </Container>\n    </>\n  );\n}\n"],"names":["selectLoading","state","contacts","isLoading","selectAllContacts","items","ContactList","useSelector","filter","dispatch","useDispatch","visibleContacts","normalizedFilter","toLowerCase","trim","contact","name","includes","getVisibleContacts","length","List","map","ListItem","sx","fontSize","number","Button","width","ml","backgroundColor","theme","color","variant","type","onClick","id","deleteContact","ContactEditor","useState","setName","phone","setPhone","handleChange","e","target","value","toast","reset","Box","component","display","gap","Typography","textAlign","TextField","label","placeholder","multiline","onChange","pattern","title","required","m","preventDefault","newName","Object","values","addContact","Filter","maxRows","setFilter","mt","Contacts","useEffect","fetchContacts","Container","maxWidth","Helmet","fontWeight"],"sourceRoot":""}