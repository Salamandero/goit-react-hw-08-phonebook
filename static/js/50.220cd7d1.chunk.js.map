{"version":3,"file":"static/js/50.220cd7d1.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.js","components/ContactEditor/ContactEditor.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { Box, Button, List, ListItem, Typography } from '@mui/material';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { theme } from 'theme';\nimport { selectAllContacts } from '../../redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n  const visibleContacts = getVisibleContacts();\n  return (\n    <>\n      {contacts.length > 0 ? (\n        <List>\n          {visibleContacts.map(contact => (\n            <ListItem sx={{ fontSize: '18px' }} key={contact.id}>\n              <p>{contact.name}:</p>\n              <p>{contact.number}</p>\n              <Button\n                sx={{\n                  width: '100px',\n                  ml: 'auto',\n\n                  [`&:hover`]: {\n                    backgroundColor: theme.palette.secondary.main,\n                    color: 'yellow',\n                  },\n                }}\n                // color=\"inherit\"\n                variant=\"outlined\"\n                type=\"button\"\n                onClick={() => onDeleteContact(contact.id)}\n              >\n                Delete\n              </Button>\n            </ListItem>\n          ))}\n        </List>\n      ) : (\n        <Box\n          sx={{\n            display: 'flex',\n            textAlign: 'center',\n            justifyContent: 'center',\n            mt: '24px',\n          }}\n        >\n          <Typography sx={{ fontWeight: 700 }}>\n            You don`t have any contacts yet...\n          </Typography>\n        </Box>\n      )}\n    </>\n  );\n};\n","import toast from 'react-hot-toast';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { Box, Button, TextField, Typography } from '@mui/material';\n\nexport const ContactEditor = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return toast.error(`Type field ${name} don't read `);\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  const handleClick = e => {\n    e.preventDefault();\n    if (!name.trim()) {\n      return toast.error('The field Name is empty, write Name');\n    }\n    if (!phone.trim()) {\n      return toast.error('The field Phone is empty, write Phone');\n    }\n    if (phone.length < 3 || phone.length > 24) {\n      return toast.error(\n        `You wrote ${phone.length} symbols, but need from 3 to 24   `\n      );\n    }\n    const newName = name.trim();\n    const proofName = Object.values(contacts).map(contact => contact.name);\n    if (proofName.includes(newName)) {\n      reset();\n      return toast.error(`${newName} is already in contacts.`);\n    }\n\n    dispatch(addContact({ name: name, number: phone }));\n\n    reset();\n  };\n\n  return (\n    <>\n      <Box component=\"form\" sx={{ display: 'grid', gap: '24px' }}>\n        <Typography variant=\"h5\" sx={{ textAlign: 'center' }}>\n          Write new contact\n        </Typography>\n\n        <TextField\n          id=\"outlined-textarea\"\n          label=\"Name\"\n          placeholder=\"Name\"\n          multiline\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <TextField\n          id=\"outlined-textarea\"\n          label=\"Phone\"\n          placeholder=\"Phone\"\n          multiline\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <Button\n          sx={{ width: '50%', m: '0 auto' }}\n          // color=\"inherit\"\n          variant=\"contained\"\n          type=\"submit\"\n          onClick={handleClick}\n        >\n          Add contact\n        </Button>\n      </Box>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <>\n      <TextField\n        id=\"outlined-multiline-flexible\"\n        label=\"Find contact by name:\"\n        multiline\n        maxRows={4}\n        type=\"text\"\n        onChange={onChange}\n        sx={{ mt: 6, width: '100%' }}\n      />\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { Box, Container } from '@mui/material';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Container sx={{ mt: 4 }} maxWidth=\"md\">\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n\n        <ContactEditor />\n\n        <Filter />\n        {isLoading ? (\n          <Box sx={{ fontWeight: 700, textAlign: 'center', mt: 4 }}>\n            Request in progress...\n          </Box>\n        ) : (\n          <ContactList />\n        )}\n      </Container>\n    </>\n  );\n}\n"],"names":["selectLoading","state","contacts","isLoading","selectAllContacts","items","ContactList","useSelector","filter","dispatch","useDispatch","visibleContacts","normalizedFilter","toLowerCase","trim","contact","name","includes","getVisibleContacts","length","List","map","ListItem","sx","fontSize","number","Button","width","ml","backgroundColor","theme","color","variant","type","onClick","id","deleteContact","Box","display","textAlign","justifyContent","mt","Typography","fontWeight","ContactEditor","useState","setName","phone","setPhone","handleChange","e","target","value","toast","reset","component","gap","TextField","label","placeholder","multiline","onChange","pattern","title","required","m","preventDefault","newName","Object","values","addContact","Filter","maxRows","setFilter","Contacts","useEffect","fetchContacts","Container","maxWidth","Helmet"],"sourceRoot":""}